<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Welcome to my Blog</title><url>/post/welcome/</url><categories/><tags/><content type="html"> Hello everyone,
Welcome to my blog!
Why GitHub Pages? Github page is offering free online static page. Starting a static page in github maybe is a easier way for individuals who prefer not to rely on existing online blog platforms.
Unlike holding a website server on AWS which can be costly and vulnerable to random attacks from online sources, GitHub Pages provides a user-friendly solution for those who simply want to manage a blog without the complexities of traditional web hosting.
Furture plan The website is updating as this is not the final syntax or style I want and I am continuously working on it. As a software engineer with coding knowledge, I intend to make various changes that align with my vision and preferences.
In addition to refining the website, I am excited to share my journey of continuous learning with all of you. Through blog posts, I will document not only the technical aspects of web development but also other areas of my learning process.
Whether it&amp;rsquo;s exploring new programming languages, diving into the world of data science, or uncovering the latest trends in artificial intelligence, I aim to provide valuable insights and resources. By sharing these experiences, I hope to inspire others to embark on their own learning adventures and foster a community of knowledge-sharing.
Stay Hungry Stay Foolish
Let&amp;rsquo;s embrace our curiosity and never stop seeking new knowledge.
Thank you for joining me on this exciting blogging journey. I look forward to sharing valuable content and connecting with you all!</content></entry><entry><title>Create Personal Page</title><url>/post/create-personal-page/</url><categories><category>Blog</category></categories><tags><tag>GitHub Page</tag><tag>Hugo</tag></tags><content type="html"><![CDATA[  Why Create Personal Page In the past, I used to maintain a server on AWS, essentially transforming it into my own personalized cloud drive and a platform for writing blogs. However, this setup incurred expenses and proved to be quite challenging to utilize effectively as a blog publishing platform. It felt akin to having a computer online, complete with virtual machines and various tools like lambda. Over time, as AWS expanded with an extensive range of offerings across different domains, it became evident that it was becoming a vast ecosystem with numerous competing components.
Consequently, I made the decision to separate the blog section from AWS and opted to create a Git page specifically dedicated to hosting my blog. This transition enables the Git page to handle all my articles and future notes, while allowing the AWS drive to focus on other topics and functionalities.
Hugo One popular option I explored for my blog is Hugo. This static site generator offers a wide range of syntax and themes. Initially, I experimented with the blank version and later switched to the &ldquo;minima&rdquo; theme. I found that Hugo provides a more organized structure for bloggers who cover diverse topics (like myself, with various notes to compile).
One of the key advantages of Hugo is its ability to maintain articles in an organized manner while separating the maintenance files from the public ones. Additionally, Hugo&rsquo;s website features numerous free themes available for download, thanks to the contributions of the community. These themes offer visually appealing structures that enhance the overall appearance of the blog.
Another noteworthy feature of Hugo is its offline preview capability using a local server. This means that users can preview their blogs before uploading them to GitHub or making them public. In other words, Hugo can function as a private notes server, eliminating the need for a separate database server. I personally created one to save my gaming walkthroughs locally as a test, and I found it extremely useful. This feature is particularly beneficial for individuals who do not wish to set up a local database server with a file system or those who want to create their own personal websites.
Overall, Hugo provides a powerful and efficient solution for organizing and managing blog articles while offering convenient offline preview capabilities, making it an ideal choice for bloggers with diverse topics and preferences.
Create GitHub Page To create a GitHub page, you&rsquo;ll need to follow these steps:
Create a new repository Go to GitHub ( https://github.com/ ) and sign in to your account. Click on the &ldquo;+&rdquo; button in the top-right corner and select &ldquo;New repository&rdquo;. Set up your repository Name your repository as &ldquo;username.github.io&rdquo;, where &ldquo;username&rdquo; is your GitHub username. Ensure that the repository is Public. As I already have a Git page set up, there is a notification in red text, reminding me that the repository already exists. However, this reminder will not displayed when user create the repository at the first time. Finish the rest of the items, such as adding adding a description, selecting a license or adding a README file. But these are not necessary for creating a GitHub page.
Quick Start This section is introduces a way to kickstart the GitHub Page with simple display. There are some document on github teaching how to start a GitHub Page easily. For example: https://docs.github.com/en/pages/quickstart Also, there are many templates with different format on the internet are free to use. In the later blog, I will introduce minima and Hugo which are the theme for the GitHub Page.
  ]]></content></entry><entry><title>Create Own Theme</title><url>/post/create-own-theme/</url><categories><category>Blog</category></categories><tags><tag>GitHub Page</tag><tag>hugo</tag></tags><content type="html"><![CDATA[  Create New Theme If you cannot find the theme that you like, you can create your own Hugo theme. Creating a custom Hugo theme allows you to have complete control over the design and functionality of your website. Here&rsquo;s a step-by-step guide on how to create your own Hugo theme:
Create a new theme directory Start by creating a new directory for your theme. You can name it whatever you like, such as &ldquo;mytheme&rdquo;.
Set up the theme files Inside your theme directory, create the necessary files and directories. At a minimum, you&rsquo;ll need the following files:
config.toml or config.yaml: This file holds the configuration settings for your theme. layouts/: This directory contains the HTML templates for your theme. You can organize them into subdirectories based on different content types. static/: This directory is used for static assets like CSS, JavaScript, images, etc. Place your theme&rsquo;s CSS files, images, and other static resources here. Define templates Within the layouts/ directory, create HTML templates to define the structure and layout of your theme. Hugo uses a template language called Go templates. You can reference the Hugo documentation ( https://gohugo.io/templates/ ) to learn more about template syntax and available functions. Common template files include:
layouts/index.html: The template for the homepage. layouts/single.html: The template for individual content pages, such as blog posts. layouts/partials/header.html: A partial template for the header section of your site. layouts/partials/footer.html: A partial template for the footer section of your site. Customize and style these templates according to your desired design.
Add CSS and other assets Place your CSS files, JavaScript files, images, and other assets inside the static/ directory. You can create subdirectories within static/ to organize your assets.
Configure theme options Define theme-specific configuration options in the config.toml or config.yaml file. These options allow users of your theme to customize certain aspects of their website, such as colors, fonts, or social media links. You can provide sensible defaults and allow users to override them in their site&rsquo;s configuration.
Test your theme To see your theme in action, create a new Hugo site using your theme. Run the following command from your site&rsquo;s root directory:
hugo new site myblog -t mytheme Replace &ldquo;myblog&rdquo; with the desired directory name for your site, and &ldquo;mytheme&rdquo; with the name of your theme directory. This command will create a new Hugo site using your custom theme.
Customize the content and layout In your site&rsquo;s root directory, you&rsquo;ll find the content/ and layouts/ directories. Customize the content by adding Markdown files in the content/ directory, and customize the layout by modifying the corresponding templates in the layouts/ directory.
Build and preview your site Run the Hugo server command to build and preview your site locally:
hugo server This command starts a local development server that generates your site and serves it at a local URL (e.g., http://localhost:1313/). You can make changes to your theme, content, or layout and see the updates in real-time.
Publish your theme Once you are satisfied with your custom theme, you can publish it on GitHub or any other Git hosting platform. Users can then include your theme as a submodule or clone it directly into their Hugo site.
By creating your own Hugo theme, you have complete creative control over your website&rsquo;s design and functionality. You can customize every aspect of your website, including the layout, typography, colors, and overall visual style. Here are a few additional points:
Document your theme It&rsquo;s a good practice to provide documentation for your theme, explaining how users can install, configure, and customize it. Include instructions on how to modify the theme&rsquo;s configuration options, add custom CSS, or make layout changes. Document any specific features or functionality your theme provides.
Consider responsiveness Ensure that your theme is responsive, meaning it adapts well to different screen sizes and devices. Test your theme on various devices and screen resolutions to ensure a consistent and optimal user experience across different platforms.
Follow Hugo best practices Familiarize yourself with the best practices recommended by the Hugo community. These include structuring your theme&rsquo;s directory, using reusable partials, leveraging Hugo&rsquo;s built-in features, and adhering to web accessibility guidelines.
Iterate and improve As you use your theme or receive feedback from users, you may identify areas for improvement. Continuously iterate on your theme, fix any issues or bugs, and consider adding new features or enhancements based on user needs and your own creative vision.
Contribute to the Hugo community If you&rsquo;re interested in sharing your theme with the wider Hugo community, consider submitting it to the official Hugo Themes website ( https://themes.gohugo.io/) . This allows other Hugo users to discover and use your theme, and it gives you an opportunity to contribute to the open-source community.
Creating your own Hugo theme gives you the freedom to express your unique design and functionality ideas. It can be an exciting and rewarding experience, allowing you to create a website that reflects your personal style and serves your specific needs.
  ]]></content></entry><entry><title>About Me</title><url>/about.html</url><categories/><tags/><content type="html"> This blog is to record the learning notes ~
Is Me Highly skilled and motivated Embedded Firmware and Software Engineer in the full software development life cycle for IoT and real-time control applications. Proficient in C/C++, Python, Jira, Git, SVN and microcontroller development with a proven track record of delivering software functionalities on time, within budget, and maintaining high quality standards. Adept at debugging, troubleshooting, problem-solving, and technical documentation while working efficiently under pressure in fast-paced environments.
You may leave your message here .</content></entry><entry><title>Others</title><url>/others.html</url><categories/><tags/><content type="html"> Here is the List of the blog
Welcome Blog</content></entry></search>